# Generated by Django 2.2.10 on 2020-05-07 03:19

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone
import taggit.managers
import tardis.tardis_portal.models.dataset
import tardis.tardis_portal.models.experiment
import tardis.tardis_portal.models.parameters
import tardis.tardis_portal.models.token


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# tardis.tardis_portal.migrations.0005_datafile_add_size_int_column
# tardis.tardis_portal.migrations.0017_add_cc_licenses

class Migration(migrations.Migration):

    replaces = [('tardis_portal', '0001_initial'), ('tardis_portal', '0002_auto_20150528_1128'), ('tardis_portal', '0003_auto_20150907_1315'), ('tardis_portal', '0004_storageboxoption_value_type'), ('tardis_portal', '0005_datafile_add_size_int_column'), ('tardis_portal', '0006_datafile_remove_size_string_column'), ('tardis_portal', '0007_remove_parameter_string_value_index'), ('tardis_portal', '0008_string_value_partial_index_postgres'), ('tardis_portal', '0009_auto_20160128_1119'), ('tardis_portal', '0010_auto_20160503_1443'), ('tardis_portal', '0011_auto_20160505_1643'), ('tardis_portal', '0012_userauthentication_approved'), ('tardis_portal', '0013_auto_20181002_1136'), ('tardis_portal', '0014_auto_20181002_1154'), ('tardis_portal', '0015_dataset_created_time'), ('tardis_portal', '0016_add_timestamps'), ('tardis_portal', '0017_add_cc_licenses'), ('tardis_portal', '0018_make_default_storage_box_status_online'), ('tardis_portal', '0019_auto_20200214_1712'), ('tardis_portal', '0020_auto_20200317_1519'), ('tardis_portal', '0021_auto_20200317_1525'), ('tardis_portal', '0022_auto_20200318_1117'), ('tardis_portal', '0023_objectacl_candownload'), ('tardis_portal', '0024_auto_20200320_1340'), ('tardis_portal', '0025_auto_20200320_1440'), ('tardis_portal', '0026_auto_20200331_1634'), ('tardis_portal', '0027_auto_20200501_1425'), ('tardis_portal', '0028_auto_20200507_1408'), ('tardis_portal', '0029_auto_20200507_1424'), ('tardis_portal', '0030_auto_20200507_1426'), ('tardis_portal', '0031_auto_20200507_1428'), ('tardis_portal', '0032_auto_20200507_1428'), ('tardis_portal', '0033_auto_20200507_1433'), ('tardis_portal', '0034_auto_20200507_1435')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0008_alter_user_username_max_length'),
        ('auth', '0011_update_proxy_permissions'),
        ('auth', '0006_require_contenttypes_0002'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=400)),
                ('directory', models.TextField(blank=True, null=True)),
                ('size', models.CharField(blank=True, max_length=400)),
                ('created_time', models.DateTimeField(blank=True, null=True)),
                ('modification_time', models.DateTimeField(blank=True, null=True)),
                ('mimetype', models.CharField(blank=True, max_length=80)),
                ('md5sum', models.CharField(blank=True, max_length=32)),
                ('sha512sum', models.CharField(blank=True, max_length=128)),
                ('deleted', models.BooleanField(default=False)),
                ('deleted_time', models.DateTimeField(blank=True, null=True)),
                ('version', models.IntegerField(default=1)),
            ],
            options={
                'ordering': ['filename'],
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('directory', models.TextField(blank=True, null=True)),
                ('immutable', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, max_length=255, null=True)),
                ('approved', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=400)),
                ('institution_name', models.CharField(default=b'Monash University', max_length=400)),
                ('description', models.TextField(blank=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('handle', models.TextField(blank=True, null=True)),
                ('locked', models.BooleanField(default=False)),
                ('public_access', models.PositiveSmallIntegerField(choices=[(1, b'No public access (hidden)'), (25, b'Ready to be released pending embargo expiry'), (50, b'Public Metadata only (no data file access)'), (100, b'Public')], default=1)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('manager_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name_plural': 'Facilities',
            },
        ),
        migrations.CreateModel(
            name='GroupAdmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Facility')),
            ],
            options={
                'verbose_name_plural': 'Instruments',
            },
        ),
        migrations.CreateModel(
            name='JTI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jti', models.CharField(max_length=255)),
                ('created_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=400, unique=True)),
                ('url', models.URLField(help_text=b'Link to document outlining licensing details.', max_length=2000, unique=True)),
                ('internal_description', models.TextField()),
                ('image_url', models.URLField(blank=True, max_length=2000)),
                ('allows_distribution', models.BooleanField(default=False, help_text=b'Does this license provide distribution rights?')),
                ('is_active', models.BooleanField(default=True, help_text=b'Can experiments continue to select this license?')),
            ],
        ),
        migrations.CreateModel(
            name='ObjectACL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pluginId', models.CharField(max_length=30)),
                ('entityId', models.CharField(max_length=320)),
                ('object_id', models.PositiveIntegerField()),
                ('canRead', models.BooleanField(default=False)),
                ('canWrite', models.BooleanField(default=False)),
                ('canDelete', models.BooleanField(default=False)),
                ('isOwner', models.BooleanField(default=False)),
                ('effectiveDate', models.DateField(blank=True, null=True)),
                ('expiryDate', models.DateField(blank=True, null=True)),
                ('aclOwnershipType', models.IntegerField(choices=[(1, b'Owner-owned'), (2, b'System-owned')], default=1)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['content_type', 'object_id'],
                'verbose_name': 'Object ACL',
            },
        ),
        migrations.CreateModel(
            name='Schema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('namespace', models.URLField(max_length=255, unique=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('type', models.IntegerField(choices=[(1, b'Experiment schema'), (2, b'Dataset schema'), (3, b'Datafile schema'), (5, b'Instrument schema'), (4, b'None')], default=1)),
                ('subtype', models.CharField(blank=True, max_length=30, null=True)),
                ('immutable', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='StorageBox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('django_storage_class', models.TextField(default=b'tardis.tardis_portal.storage.MyTardisLocalFileSystemStorage')),
                ('max_size', models.BigIntegerField()),
                ('status', models.CharField(max_length=100)),
                ('name', models.TextField(default=b'default', unique=True)),
                ('description', models.TextField(default=b'Default Storage')),
                ('master_box', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_boxes', to='tardis_portal.StorageBox')),
            ],
            options={
                'verbose_name_plural': 'storage boxes',
            },
        ),
        migrations.CreateModel(
            name='StorageBoxAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.TextField()),
                ('value', models.TextField()),
                ('storage_box', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='tardis_portal.StorageBox')),
            ],
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=30, unique=True)),
                ('expiry_date', models.DateField(default=tardis.tardis_portal.models.token._token_expiry)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Experiment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isDjangoAccount', models.BooleanField(default=True)),
                ('rapidConnectEduPersonTargetedID', models.CharField(blank=True, max_length=400, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAuthentication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50)),
                ('authenticationMethod', models.CharField(max_length=30)),
                ('userProfile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.UserProfile')),
            ],
        ),
        migrations.CreateModel(
            name='ParameterName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('full_name', models.CharField(max_length=60)),
                ('units', models.CharField(blank=True, max_length=60)),
                ('data_type', models.IntegerField(choices=[(1, b'NUMERIC'), (2, b'STRING'), (3, b'URL'), (4, b'LINK'), (5, b'FILENAME'), (6, b'DATETIME'), (7, b'LONGSTRING'), (8, b'JSON')], default=2)),
                ('immutable', models.BooleanField(default=False)),
                ('comparison_type', models.IntegerField(choices=[(1, b'Exact value'), (8, b'Contains'), (3, b'Range'), (4, b'Greater than'), (5, b'Greater than or equal'), (6, b'Less than'), (7, b'Less than or equal')], default=1)),
                ('is_searchable', models.BooleanField(default=False)),
                ('choices', models.CharField(blank=True, max_length=500)),
                ('order', models.PositiveIntegerField(blank=True, default=9999, null=True)),
                ('schema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Schema')),
            ],
            options={
                'ordering': ('order', 'name'),
                'unique_together': {('schema', 'name')},
            },
        ),
        migrations.CreateModel(
            name='InstrumentParameterSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Instrument')),
                ('schema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Schema')),
                ('storage_box', models.ManyToManyField(related_name='instrumentparametersets', to='tardis_portal.StorageBox')),
            ],
            options={
                'ordering': ['id'],
                'abstract': False,
            },
            bases=(models.Model, tardis.tardis_portal.models.parameters.ParameterSetManagerMixin),
        ),
        migrations.CreateModel(
            name='InstrumentParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('string_value', models.TextField(blank=True, db_index=True, null=True)),
                ('numerical_value', models.FloatField(blank=True, db_index=True, null=True)),
                ('datetime_value', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('link_id', models.PositiveIntegerField(blank=True, null=True)),
                ('link_ct', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.ParameterName')),
                ('parameterset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.InstrumentParameterSet')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FreeTextSearchField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameter_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.ParameterName')),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentParameterSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Experiment')),
                ('schema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Schema')),
                ('storage_box', models.ManyToManyField(related_name='experimentparametersets', to='tardis_portal.StorageBox')),
            ],
            options={
                'ordering': ['id'],
                'abstract': False,
            },
            bases=(models.Model, tardis.tardis_portal.models.parameters.ParameterSetManagerMixin),
        ),
        migrations.CreateModel(
            name='ExperimentParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('string_value', models.TextField(blank=True, db_index=True, null=True)),
                ('numerical_value', models.FloatField(blank=True, db_index=True, null=True)),
                ('datetime_value', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('link_id', models.PositiveIntegerField(blank=True, null=True)),
                ('link_ct', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.ParameterName')),
                ('parameterset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.ExperimentParameterSet')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='experiment',
            name='license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.License'),
        ),
        migrations.CreateModel(
            name='DatasetParameterSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Dataset')),
                ('schema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Schema')),
                ('storage_box', models.ManyToManyField(related_name='datasetparametersets', to='tardis_portal.StorageBox')),
            ],
            options={
                'ordering': ['id'],
                'abstract': False,
            },
            bases=(models.Model, tardis.tardis_portal.models.parameters.ParameterSetManagerMixin),
        ),
        migrations.CreateModel(
            name='DatasetParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('string_value', models.TextField(blank=True, db_index=True, null=True)),
                ('numerical_value', models.FloatField(blank=True, db_index=True, null=True)),
                ('datetime_value', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('link_id', models.PositiveIntegerField(blank=True, null=True)),
                ('link_ct', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.ParameterName')),
                ('parameterset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.DatasetParameterSet')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='dataset',
            name='experiments',
            field=models.ManyToManyField(related_name='datasets', to='tardis_portal.Experiment'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='instrument',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Instrument'),
        ),
        migrations.CreateModel(
            name='DatafileParameterSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datafile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.DataFile')),
                ('schema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Schema')),
                ('storage_box', models.ManyToManyField(related_name='datafileparametersets', to='tardis_portal.StorageBox')),
            ],
            options={
                'ordering': ['id'],
                'abstract': False,
            },
            bases=(models.Model, tardis.tardis_portal.models.parameters.ParameterSetManagerMixin),
        ),
        migrations.CreateModel(
            name='DatafileParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('string_value', models.TextField(blank=True, db_index=True, null=True)),
                ('numerical_value', models.FloatField(blank=True, db_index=True, null=True)),
                ('datetime_value', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('link_id', models.PositiveIntegerField(blank=True, null=True)),
                ('link_ct', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.ParameterName')),
                ('parameterset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.DatafileParameterSet')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='datafile',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Dataset'),
        ),
        migrations.CreateModel(
            name='ExperimentAuthor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(max_length=255)),
                ('institution', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('order', models.PositiveIntegerField()),
                ('url', models.URLField(blank=True, help_text=b'URL identifier for the author', max_length=2000, null=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Experiment')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('experiment', 'author')},
            },
        ),
        migrations.CreateModel(
            name='DataFileObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.TextField(blank=True, null=True)),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('verified', models.BooleanField(default=False)),
                ('last_verified_time', models.DateTimeField(blank=True, null=True)),
                ('datafile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_objects', to='tardis_portal.DataFile')),
                ('storage_box', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_objects', to='tardis_portal.StorageBox')),
            ],
            options={
                'unique_together': {('datafile', 'storage_box')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='datafile',
            unique_together={('dataset', 'directory', 'filename', 'version')},
        ),
        migrations.CreateModel(
            name='StorageBoxOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.TextField()),
                ('value', models.TextField()),
                ('storage_box', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='tardis_portal.StorageBox')),
                ('value_type', models.CharField(choices=[(b'string', b'String value'), (b'pickle', b'Pickled value')], default=b'string', max_length=6)),
            ],
        ),
        migrations.AddField(
            model_name='datafile',
            name='_size',
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=tardis.tardis_portal.migrations.0005_datafile_add_size_int_column.cast_string_to_integer,
        ),
        migrations.RemoveField(
            model_name='datafile',
            name='size',
        ),
        migrations.RenameField(
            model_name='datafile',
            old_name='_size',
            new_name='size',
        ),
        migrations.AlterField(
            model_name='datafileparameter',
            name='string_value',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='datasetparameter',
            name='string_value',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='experimentparameter',
            name='string_value',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='instrumentparameter',
            name='string_value',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.RunSQL(
            sql='DROP INDEX IF EXISTS tardis_portal_experimentparameter_string_value;',
            reverse_sql='CREATE INDEX tardis_portal_experimentparameter_string_value ON tardis_portal_experimentparameter(string_value) WHERE char_length(string_value) <= 255;',
        ),
        migrations.RunSQL(
            sql='CREATE INDEX tardis_portal_experimentparameter_string_value ON tardis_portal_experimentparameter(string_value) WHERE char_length(string_value) <= 255;',
            reverse_sql='DROP INDEX IF EXISTS tardis_portal_experimentparameter_string_value;',
        ),
        migrations.RunSQL(
            sql='DROP INDEX IF EXISTS tardis_portal_datasetparameter_string_value;',
            reverse_sql='CREATE INDEX tardis_portal_datasetparameter_string_value ON tardis_portal_datasetparameter(string_value) WHERE char_length(string_value) <= 255;',
        ),
        migrations.RunSQL(
            sql='CREATE INDEX tardis_portal_datasetparameter_string_value ON tardis_portal_datasetparameter(string_value) WHERE char_length(string_value) <= 255;',
            reverse_sql='DROP INDEX IF EXISTS tardis_portal_datasetparameter_string_value;',
        ),
        migrations.RunSQL(
            sql='DROP INDEX IF EXISTS tardis_portal_datafileparameter_string_value;',
            reverse_sql='CREATE INDEX tardis_portal_datafileparameter_string_value ON tardis_portal_datafileparameter(string_value) WHERE char_length(string_value) <= 255;',
        ),
        migrations.RunSQL(
            sql='CREATE INDEX tardis_portal_datafileparameter_string_value ON tardis_portal_datafileparameter(string_value) WHERE char_length(string_value) <= 255;',
            reverse_sql='DROP INDEX IF EXISTS tardis_portal_datafileparameter_string_value;',
        ),
        migrations.RunSQL(
            sql='DROP INDEX IF EXISTS tardis_portal_instrumentparameter_string_value;',
            reverse_sql='CREATE INDEX tardis_portal_instrumentparameter_string_value ON tardis_portal_instrumentparameter(string_value) WHERE char_length(string_value) <= 255;',
        ),
        migrations.RunSQL(
            sql='CREATE INDEX tardis_portal_instrumentparameter_string_value ON tardis_portal_instrumentparameter(string_value) WHERE char_length(string_value) <= 255;',
            reverse_sql='DROP INDEX IF EXISTS tardis_portal_instrumentparameter_string_value;',
        ),
        migrations.AlterUniqueTogether(
            name='instrument',
            unique_together={('name', 'facility')},
        ),
        migrations.AlterField(
            model_name='datafile',
            name='mimetype',
            field=models.CharField(blank=True, db_index=True, max_length=80),
        ),
        migrations.AlterField(
            model_name='datafile',
            name='directory',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='dataset',
            name='directory',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='experimentauthor',
            name='url',
            field=models.URLField(blank=True, help_text=b'URL identifier for the author', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='license',
            name='image_url',
            field=models.URLField(blank=True, max_length=255),
        ),
        migrations.AlterField(
            model_name='license',
            name='name',
            field=models.CharField(max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='license',
            name='url',
            field=models.URLField(help_text=b'Link to document outlining licensing details.', max_length=255),
        ),
        migrations.AlterField(
            model_name='storagebox',
            name='name',
            field=models.CharField(default=b'default', max_length=255, unique=True),
        ),
        migrations.AddField(
            model_name='userauthentication',
            name='approved',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterModelOptions(
            name='facility',
            options={'ordering': ('name',), 'verbose_name_plural': 'Facilities'},
        ),
        migrations.AlterModelOptions(
            name='instrument',
            options={'ordering': ('name',), 'verbose_name_plural': 'Instruments'},
        ),
        migrations.AlterModelOptions(
            name='storagebox',
            options={'ordering': ('name',), 'verbose_name_plural': 'storage boxes'},
        ),
        migrations.AlterField(
            model_name='storagebox',
            name='max_size',
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='storagebox',
            name='status',
            field=models.CharField(default=b'online', max_length=100),
        ),
        migrations.AddField(
            model_name='dataset',
            name='modified_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='facility',
            name='modified_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='instrument',
            name='modified_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='facility',
            name='created_time',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='instrument',
            name='created_time',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='dataset',
            name='created_time',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.RunPython(
            code=tardis.tardis_portal.migrations.0017_add_cc_licenses.forwards_func,
            reverse_code=tardis.tardis_portal.migrations.0017_add_cc_licenses.reverse_func,
        ),
        migrations.AlterField(
            model_name='storagebox',
            name='status',
            field=models.CharField(default='online', max_length=100),
        ),
        migrations.AddField(
            model_name='dataset',
            name='dataset_id',
            field=models.CharField(default=tardis.tardis_portal.models.dataset.dataset_id_default, max_length=400, unique=True),
        ),
        migrations.AddField(
            model_name='dataset',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AlterField(
            model_name='storagebox',
            name='django_storage_class',
            field=models.TextField(default='storages.backends.s3boto3.S3Boto3Storage'),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raid', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('locked', models.BooleanField(default=False)),
                ('public_access', models.PositiveSmallIntegerField(choices=[(1, 'No public access (hidden)'), (25, 'Ready to be released pending embargo expiry'), (50, 'Public Metadata only (no data file access)'), (100, 'Public')], default=1)),
                ('embargo_until', models.DateTimeField(blank=True, null=True)),
                ('sensitive', models.BooleanField(default=False)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('lead_researcher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('start_date', models.DateTimeField(default=datetime.datetime(2020, 5, 1, 2, 25, 35, 770837))),
                ('url', models.URLField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='parametername',
            name='is_viewable',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='orcid',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='experiment',
            name='project_model',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Project'),
        ),
        migrations.AddField(
            model_name='datafileparameter',
            name='sensitive_metadata',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='datasetparameter',
            name='sensitive_metadata',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='experimentparameter',
            name='sensitive_metadata',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='instrumentparameter',
            name='sensitive_metadata',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ProjectParameterSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Project')),
                ('schema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Schema')),
                ('storage_box', models.ManyToManyField(related_name='projectparametersets', to='tardis_portal.StorageBox')),
            ],
            options={
                'ordering': ['id'],
                'abstract': False,
            },
            bases=(models.Model, tardis.tardis_portal.models.parameters.ParameterSetManagerMixin),
        ),
        migrations.CreateModel(
            name='ProjectParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('string_value', models.TextField(blank=True, null=True)),
                ('numerical_value', models.FloatField(blank=True, db_index=True, null=True)),
                ('datetime_value', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('link_id', models.PositiveIntegerField(blank=True, null=True)),
                ('sensitive_metadata', models.BooleanField(default=False)),
                ('link_ct', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.ParameterName')),
                ('parameterset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.ProjectParameterSet')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='experiment',
            name='handle',
        ),
        migrations.AddField(
            model_name='instrument',
            name='description',
            field=models.TextField(blank=True, default='No description'),
        ),
        migrations.AddField(
            model_name='objectacl',
            name='canDownload',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='dataset',
            name='embargo_until',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='experiment',
            name='embargo_until',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.RemoveField(
            model_name='experiment',
            name='institution_name',
        ),
        migrations.AddField(
            model_name='facility',
            name='url',
            field=models.URLField(blank=True, max_length=255, null=True),
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='The University of Auckland', max_length=255)),
                ('ror', models.CharField(blank=True, default='https://ror.org/03b94tp07', max_length=100, null=True)),
                ('url', models.URLField(blank=True, default='https://auckland.ac.nz', max_length=255, null=True)),
                ('manager_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='institution',
            field=models.ManyToManyField(related_name='institutions', to='tardis_portal.Institution'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='raid',
            field=models.CharField(default=tardis.tardis_portal.models.experiment.experiment_internal_id_default, max_length=400, unique=True),
        ),
        migrations.RenameField(
            model_name='schema',
            old_name='type',
            new_name='schema_type',
        ),
        migrations.AlterField(
            model_name='schema',
            name='schema_type',
            field=models.IntegerField(choices=[(11, 'Project schema'), (1, 'Experiment schema'), (2, 'Dataset schema'), (3, 'Datafile schema'), (5, 'Instrument schema'), (4, 'None')], default=1),
        ),
        migrations.RemoveField(
            model_name='parametername',
            name='is_searchable',
        ),
        migrations.RemoveField(
            model_name='project',
            name='sensitive',
        ),
        migrations.AddField(
            model_name='facility',
            name='institution',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Institution'),
        ),
        migrations.AddField(
            model_name='objectacl',
            name='canSensitive',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='experimentauthor',
            name='institution',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tardis_portal.Institution'),
        ),
        migrations.AddField(
            model_name='instrument',
            name='instrument_id',
            field=models.CharField(default='No ID', max_length=255),
        ),
        migrations.AlterField(
            model_name='project',
            name='lead_researcher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='project',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2020, 5, 7, 2, 7, 32, 168451)),
        ),
        migrations.AlterField(
            model_name='project',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2020, 5, 7, 2, 24, 57, 395705)),
        ),
        migrations.AlterField(
            model_name='project',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2020, 5, 7, 2, 26, 19, 916304)),
        ),
        migrations.AlterField(
            model_name='project',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2020, 5, 7, 2, 28, 5, 957963)),
        ),
        migrations.AlterField(
            model_name='project',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2020, 5, 7, 2, 28, 15, 187277)),
        ),
        migrations.AlterField(
            model_name='project',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2020, 5, 7, 2, 33, 56, 417101, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='project',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime.now),
        ),
    ]
