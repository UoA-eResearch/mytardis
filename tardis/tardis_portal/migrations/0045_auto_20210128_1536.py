# Generated by Django 2.2.10 on 2021-01-28 02:36

from django.db import migrations


def create_new_acl_objects(apps, schema_editor):

    OBJECTACL = apps.get_model("tardis_portal", "ObjectACL")

    PROJECTACL = apps.get_model("tardis_portal", "ProjectACL")
    EXPERIMENTACL = apps.get_model("tardis_portal", "ExperimentACL")
    DATASETACL = apps.get_model("tardis_portal", "DatasetACL")
    DATAFILEACL = apps.get_model("tardis_portal", "DatafileACL")

    USER = apps.get_model("auth", "User")
    GROUP = apps.get_model("auth", "Group")

    PROJECT = apps.get_model("tardis_portal", "Project")
    EXPERIMENT = apps.get_model("tardis_portal", "Experiment")
    DATASET = apps.get_model("tardis_portal", "Dataset")
    DATAFILE = apps.get_model("tardis_portal", "DataFile")


    for acl in OBJECTACL.objects.all().iterator():

        # pull out user/group corresponding to old ACL, ready for new foreignkey relation
        if acl.pluginId == 'django_user':
            try:
                linked_user = USER.objects.get(pk=acl.entityId)
            except:
                print("ERROR finding user for new_ACL copy: old_acl_id="+str(acl.id)+', userid='+str(acl.entityId))
        if acl.pluginId == 'django_group':
            try:
                linked_group = GROUP.objects.get(pk=acl.entityId)
            except:
                print("ERROR finding group for new_ACL copy: old_acl_id="+str(acl.id)+', groupid='+str(acl.entityId))


        # if old ACL belongs to a project
        if acl.content_type.model == 'project':

            try:
                linked_object = PROJECT.objects.get(pk=acl.object_id)
            except:
                print("ERROR finding project for new_ACL copy: old_acl_id="+str(acl.id)+', proj_id='+str(acl.object_id))

            if acl.pluginId == 'django_user':
                PROJECTACL.objects.create(canRead = acl.canRead,
                                          canDownload = acl.canDownload,
                                          canWrite = acl.canWrite,
                                          canDelete = acl.canDelete,
                                          canSensitive = acl.canSensitive,
                                          isOwner = acl.isOwner,
                                          effectiveDate = acl.effectiveDate,
                                          expiryDate = acl.expiryDate,
                                          aclOwnershipType = acl.aclOwnershipType,
                                          project = linked_object,
                                          user = linked_user)

            elif acl.pluginId == 'django_group':
                PROJECTACL.objects.create(canRead = acl.canRead,
                                          canDownload = acl.canDownload,
                                          canWrite = acl.canWrite,
                                          canDelete = acl.canDelete,
                                          canSensitive = acl.canSensitive,
                                          isOwner = acl.isOwner,
                                          effectiveDate = acl.effectiveDate,
                                          expiryDate = acl.expiryDate,
                                          aclOwnershipType = acl.aclOwnershipType,
                                          project = linked_object,
                                          group = linked_group)


        # if old ACL belongs to an experiment
        elif acl.content_type.model == 'experiment':

            try:
                linked_object = EXPERIMENT.objects.get(pk=acl.object_id)
            except:
                print("ERROR finding experiment for new_ACL copy: old_acl_id="+str(acl.id)+', exp_id='+str(acl.object_id))

            if acl.pluginId == 'django_user':
                EXPERIMENTACL.objects.create(canRead = acl.canRead,
                                             canDownload = acl.canDownload,
                                             canWrite = acl.canWrite,
                                             canDelete = acl.canDelete,
                                             canSensitive = acl.canSensitive,
                                             isOwner = acl.isOwner,
                                             effectiveDate = acl.effectiveDate,
                                             expiryDate = acl.expiryDate,
                                             aclOwnershipType = acl.aclOwnershipType,
                                             experiment = linked_object,
                                             user = linked_user)

            elif acl.pluginId == 'django_group':
                EXPERIMENTACL.objects.create(canRead = acl.canRead,
                                             canDownload = acl.canDownload,
                                             canWrite = acl.canWrite,
                                             canDelete = acl.canDelete,
                                             canSensitive = acl.canSensitive,
                                             isOwner = acl.isOwner,
                                             effectiveDate = acl.effectiveDate,
                                             expiryDate = acl.expiryDate,
                                             aclOwnershipType = acl.aclOwnershipType,
                                             experiment = linked_object,
                                             group = linked_group)

        # if old ACL belongs to a dataset
        elif acl.content_type.model == 'dataset':

            try:
                linked_object = DATASET.objects.get(pk=acl.object_id)
            except:
                print("ERROR finding dataset for new_ACL copy: old_acl_id="+str(acl.id)+', set_id='+str(acl.object_id))

            if acl.pluginId == 'django_user':
                DATASETACL.objects.create(canRead = acl.canRead,
                                          canDownload = acl.canDownload,
                                          canWrite = acl.canWrite,
                                          canDelete = acl.canDelete,
                                          canSensitive = acl.canSensitive,
                                          isOwner = acl.isOwner,
                                          effectiveDate = acl.effectiveDate,
                                          expiryDate = acl.expiryDate,
                                          aclOwnershipType = acl.aclOwnershipType,
                                          dataset = linked_object,
                                          user = linked_user)

            elif acl.pluginId == 'django_group':
                DATASETACL.objects.create(canRead = acl.canRead,
                                          canDownload = acl.canDownload,
                                          canWrite = acl.canWrite,
                                          canDelete = acl.canDelete,
                                          canSensitive = acl.canSensitive,
                                          isOwner = acl.isOwner,
                                          effectiveDate = acl.effectiveDate,
                                          expiryDate = acl.expiryDate,
                                          aclOwnershipType = acl.aclOwnershipType,
                                          dataset = linked_object,
                                          group = linked_group)

        # if old ACL belongs to a datafile
        elif acl.content_type.model == 'datafile':

            try:
                linked_object = DATAFILE.objects.get(pk=acl.object_id)
            except:
                print("ERROR finding datafile for new_ACL copy: old_acl_id="+str(acl.id)+', file_id='+str(acl.object_id))

            if acl.pluginId == 'django_user':
                DATAFILEACL.objects.create(canRead = acl.canRead,
                                           canDownload = acl.canDownload,
                                           canWrite = acl.canWrite,
                                           canDelete = acl.canDelete,
                                           canSensitive = acl.canSensitive,
                                           isOwner = acl.isOwner,
                                           effectiveDate = acl.effectiveDate,
                                           expiryDate = acl.expiryDate,
                                           aclOwnershipType = acl.aclOwnershipType,
                                           datafile = linked_object,
                                           user = linked_user)

            elif acl.pluginId == 'django_group':
                DATAFILEACL.objects.create(canRead = acl.canRead,
                                           canDownload = acl.canDownload,
                                           canWrite = acl.canWrite,
                                           canDelete = acl.canDelete,
                                           canSensitive = acl.canSensitive,
                                           isOwner = acl.isOwner,
                                           effectiveDate = acl.effectiveDate,
                                           expiryDate = acl.expiryDate,
                                           aclOwnershipType = acl.aclOwnershipType,
                                           datafile = linked_object,
                                           group = linked_group)


        # if something went horribly wrong with Generic foreign keys
        else:
            print("bad ACL content type: id="+str(acl.id)+",!"+str(acl.content_type.model)+"!")



class Migration(migrations.Migration):

    dependencies = [
        ('tardis_portal', '0044_datafileacl_datasetacl_experimentacl_projectacl'),
    ]

    operations = [
            migrations.RunPython(create_new_acl_objects
            ),
    ]
